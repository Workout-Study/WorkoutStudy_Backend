package main

import (
	"context"
	"workoutstudy_chatting/config"
	"workoutstudy_chatting/handler"
	"workoutstudy_chatting/persistence"
	"workoutstudy_chatting/service"

	"github.com/gin-gonic/gin"

	_ "workoutstudy_chatting/docs" // docs is generated by Swag CLI, you have to import it.

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

func main() {
	// persistence 패키지에서 DB 인스턴스를 초기화하고 반환받습니다.
	DB := persistence.InitializeDB()

	// 서비스 인스턴스 생성
	chatService := service.NewChatService(persistence.NewChatRepository(DB))
	fitMateService := service.NewFitMateService(persistence.NewPostgresFitMateRepository(DB))
	fitGroupService := service.NewFitGroupService(persistence.NewFitGroupRepository(DB))

	// Handler 인스턴스 생성
	chatHandler := handler.NewChatHandler(chatService, fitMateService, fitGroupService)
	fitMateHandler := handler.NewFitMateHandler(fitMateService)

	r := gin.Default()
	// Swagger 라우트 설정
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// @Summary websocket chat
	// @Description 실시간 채팅. 채팅방 퇴장 시 연결 종료
	// @Tags chat
	// @Accept  json
	// @Produce  json
	// @Param fitGroupId : 채팅방 연결을 위한 피트그룹 ID
	// @Success 200 {array} string
	// @Router /chat [get]
	r.GET("/chat", chatHandler.Chat)

	// @Summary 피트그룹 조회 API
	// @Description userId 로 해당 사용자가 속해 있는 피트그룹들의 정보를 조희
	// @Tags fitmate
	// @Accept  json
	// @Produce  json
	// @Param userId :  사용자 ID, fitMateId 가 아님.
	// @Success 200 {object} FitMateResponse
	// @Router /retrieve/fit-group [get]
	r.GET("/retrieve/fit-group", fitMateHandler.RetrieveFitGroupByMateID)

	// @Summary 최신 채팅 내역을 확인하고 동기화 하기 위한 API
	// @Description messageId 로 서버측 최신 채팅과 앱의 최신 채팅을 비교
	// @Tags message
	// @Accept  json
	// @Produce  json
	// @Param messageId : 안드로이드 앱에서 생성된 message UUID
	// @Param fitGroupId : 피트그룹 채팅방 ID
	// @Param userId : 사용자 ID, auth-server 의 userId, fit-mate-service 의 fitMateUserId
	// @Param messageTime : 메시지 생성 시간
	// @Param messageType : 메시지 타입 (CHATTING or TICKET)
	// @Success 200 {array} Message
	// @Router /retrieve/message [get]
	r.GET("/retrieve/message", chatHandler.RetrieveMessages)

	// Kafka Consumer 설정 및 실행
	kafkaConsumer := config.NewKafkaConsumer("kafka-1:9092", "chatting-server-consumer", []string{"fit-mate", "fit-group"})
	ctx := context.Background()
	go func() {
		kafkaConsumer.Consume(ctx) // 토픽 구독, 토픽 목록을 여기서는 명시하지 않습니다.
	}()
	r.Run(":8888")
}
